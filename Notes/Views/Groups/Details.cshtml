@model Notes.Models.Group

@{
    /** Details.cshtml
     * 
     * This page allows the user to see the notes associated with a single 
     * group. From here, users may view a note, edit it, or delete the note.
     * Each note also contains a link to the details page of the user that
     * created the note, which can show the user all notes created by that
     * user.
     *
     * Author: Haran
     * Date: December 6th, 2020
     */
    ViewData["Title"] = $"Notes under \"{Model.Name}\"";
}

<!-- Same heading as title -->
<h1>@ViewData["Title"]</h1>

<!-- Same table as Users/Details.cshtml -->
<div>
    <table class="table table-hover">
        <!-- Table header -->
        <thead class="thead-dark">
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Description
                </th>
                <!-- Instead of showing the group, show who the note was created by -->
                <th>
                    Created by
                </th>
                <th></th>
            </tr>
        </thead>
        <!-- Go through and show all notes in the database; the HTML elements will be repeated for *every* note -->
        <tbody>
            @foreach (var item in Model.Notes)
            {
                <tr>
                    <td>
                        <!-- Link the note name to the view page for that note -->
                        <a class="table-anchor" asp-controller="Notes" asp-action="Details" asp-route-id="@item.Id">
                            @Html.DisplayFor(modelItem => item.Name)
                        </a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <!-- Again, not showing content since it can be long -->
                    <td>
                        <!-- Link back to the user that created this note -->
                        <a asp-controller="Users" asp-action="Details" asp-route-id="@item.UserId">
                            @Html.DisplayFor(modelItem => item.User.UserName)
                        </a>
                    </td>
                    <td>
                        <!-- Adding a view button as well because the other 
                             buttons may catch the user's attention first 
                             Having a view button here means the user can
                             access it from more than one spot, which 
                             could be easier for them -->
                        <a class="btn btn-outline-success" asp-controller="Notes" asp-action="Details" asp-route-id="@item.Id">View</a>
                        <!-- A link to edit the note, or delete it, as a button -->
                        <a class="btn btn-outline-primary" asp-controller="Notes" asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                        <a class="btn btn-outline-danger" asp-controller="Notes" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>
<div>
    <!-- Edit button, and return to list button -->
    <a class="btn btn-outline-primary" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
    <a class="btn btn-outline-primary" asp-action="Index">Back to List</a>

    @{ 
        // only show the delete button if there are no notes
        if (Model.Notes.Count == 0)
        {
            <!-- Delete button as well, just in case -->
            <a class="btn btn-outline-danger" asp-action="Delete" asp-route-id="@Model.Id">Delete</a>
        }
    }
</div>
