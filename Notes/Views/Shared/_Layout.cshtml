@{ 
    /** _Layout.cs
     * 
     * This page serves as a wrapper around other pages.
     * It contains elements such as the sidebar, which holds links to other pages
     * of the site (such as creating/viewing notes, users, and groups) as well as
     * a link to the about page. 
     * It also contains a footer, with a link to the GitHub repository for this
     * project.
     * This cshtml file renders other files by using the RenderBody function.
     * 
     * Author: Haran
     * Date: December 4th, 2020
     */
}
<!DOCTYPE html>
<html lang="en">
<head>
    @{ 
/* 
    This Layout page renders acts as a sort of wrapper around other pages.
    The best example I can give, is that it is similar to including/requiring other scripts in PHP.
    With that example, the HTML in those pages are included as well - which means that it will be
    printed alongside the PHP logic.
    With this however, the basic layout for the site can be declared, and the `RenderBody` call
    takes care of executing the other cshtml files. So this sort of acts like a wrapper
    around the other views.
*/
    }
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Some additional metadata about the site -->
    <meta name="application-name" content="Notes" />
    <meta name="author" content="Haran" />
    <meta name="description" content="A simple note-taking application." />
    <!-- The title, which is set by individual pages. -->
    <title>@ViewData["Title"]</title>

    <!-- Include the Bootstrap CSS library-->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

    <!-- The `asp-append-version` attribute adds the checksum of the CSS file (at compile-time).
         So, if the css file is changed during run-time, this will ensure that the most recent file
         is served (essentially serving as a cache buster of sorts). 
         This links to the CSS file under wwwroot/css/ that contains my 
         custom styling -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
</head>
<body>
    <header>
        <!-- Top navigation bar, which holds just a link to the main index for now 
             I like the look of the dark navbar, so that's why I picked it -->
       

        <!-- I only want a sidebar, and that will hold the links to the main 
             pages, and the login functionality for communication activity 5.
             I like the look of the dark sidebar, so I use the dark 
             background selector. -->
        <nav class="sidebar bg-dark">
            <!-- Site-specific links (such as home page or about page) -->
            <ul class="links" id="site">
                <!-- About this application -->
                <li>
                    <!-- Link to the home page using the ASP provided attributes -->
                    <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">
                        <!-- The logo -->
                        <img src="~/img/logo.png" alt="Site Logo" height="32" width="32" />
                        Notes
                    </a>
                </li>
                <li><a asp-controller="Home" asp-action="About">About</a></li>
            </ul>

            <!-- Using a heading tag to specify that this is a section -->
            <h6>Notes</h6>
            <ul class="links" id="notes">
                <!-- The asp-controller and asp-action attributes allow me to
                     specify the controller and route that this link should
                     point to, without having to hardcode an href. -->
                <li><a asp-controller="Notes" asp-action="Index">View Notes</a></li>
                <li><a asp-controller="Notes" asp-action="Create">Create a Note</a></li>
            </ul>

            <h6>Users</h6>
            <ul class="links" id="users">
                <li><a asp-controller="Users" asp-action="Index">View Users</a></li>
                <li><a asp-controller="Users" asp-action="Create">Create a User</a></li>
            </ul>

            <h6>Groups</h6>
            <ul class="links" id="groups">
                <li><a asp-controller="Groups" asp-action="Index">View Groups</a></li>
                <li><a asp-controller="Groups" asp-action="Create">Create a Group</a></li>
            </ul>

        </nav>
    </header>
    <div class="container">
        <!-- Pad all sides by 4 - looks to be the sweet spot -->
        <main role="main" class="p-4">
            <!-- The actual page contents. This means the pages under the view folders (such as Home/Index.cshtml). -->
            @RenderBody()
        </main>
    </div>

    <!-- These two classes mean that there will be a line separating the 
         footer from the rest of the content, similar to a <hr /> element. -->
    <footer class="border-top bg-dark">
        <!-- Link to the GitHub repo -->
        Notes - A simple note-taking application - <a href="https://github.com/lpt0/NETD3202-Lab5-Notes">View the source on GitHub</a>
    </footer>
    <!-- The scripts used in this application were pre-included by 
         Visual Studio and ASP.NET Core. It takes care of client-side 
         validation, among other things. 
         Since the site.js file was not being used, it has been removed. -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    @RenderSection("Scripts", required: false)
</body>
</html>
