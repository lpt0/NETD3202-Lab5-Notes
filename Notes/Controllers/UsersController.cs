/** UsersController.cs
 * 
 * This controller handles functionality under the Users/ route of this 
 * application.
 * This handles the backend functionality of listing users (and notes 
 * associated with them), as well as creating new users. Users cannot be
 * edited or deleted. The identity framework has not been used for this lab.
 * Most of the code here was generated by Visual Studio. Sections that I 
 * wrote will have comments where necessary.
 * 
 * Author: Haran
 * Date: December 6th, 2020
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Notes.Models;

namespace Notes.Controllers
{
    public class UsersController : Controller
    {
        private readonly ApplicationContext _context;

        public UsersController(ApplicationContext context)
        {
            _context = context;
        }

        // GET: Users
        // Anyone can view the list of users
        public async Task<IActionResult> Index()
        {
            /* include the notes in the query, so the number of notes created
             * can be shown */
            return View(await _context.Users.Include(m => m.Notes).ToListAsync());
        }

        // GET: Users/Details/5
        // The new ID (inherited from IdentityUser) is a string, not int
        // Anyone can view the notes for a user
        public async Task<IActionResult> Details(string? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            /* get the users (my custom User class, with a relationship to
             * Notes) */
            var user = await _context.Users
                .Include(m => m.Notes) // load any notes for this user (if they exist)
                .ThenInclude(n => n.Group) // and load any groups associated with the notes
                .FirstOrDefaultAsync(m => m.Id == id); // and look for the specific id
            if (user == null)
            {
                return NotFound();
            }

            return View(user);
        }

        // No more create route(s); users are created by registering now

        // Users cannot be edited or deleted, so those routes have been removed

        // User ID is now a string instead of int
        private bool UserExists(string id)
        {
            return _context.Users.Any(e => e.Id == id);
        }
    }
}
